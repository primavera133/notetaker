"use client";

import { type NextPage } from "next";
import { useSession } from "next-auth/react";
import Head from "next/head";
import { useEffect, useState, type FormEvent } from "react";

import { api, type RouterOutputs } from "~/trpc/react";

import {
  Box,
  Button,
  Divider,
  Flex,
  FormControl,
  FormLabel,
  Input,
  ListItem,
  OrderedList,
  Text,
} from "@chakra-ui/react";
import { Header } from "./_components/Header";
import { NoteCard } from "./_components/NoteCard";
import { NoteEditor } from "./_components/NoteEditor";

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Notetaker</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header />
        <Content />
      </main>
    </>
  );
};

export default Home;

type Topic = RouterOutputs["topic"]["getAll"][0];

const Content: React.FC = () => {
  const { data: sessionData } = useSession();

  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);
  const [newTitle, setNewTitle] = useState<string>("");

  const {
    data: topics,
    refetch: refetchTopics,
    isSuccess: isTopicsSuccess,
  } = api.topic.getAll.useQuery(
    undefined, // no input
    {
      enabled: sessionData?.user !== undefined,
    }
  );

  const createTopic = api.topic.create.useMutation({
    onSuccess: () => {
      void refetchTopics();
    },
  });

  useEffect(() => {
    if (isTopicsSuccess && topics) {
      setSelectedTopic(selectedTopic ?? topics[0] ?? null);
    }
  }, [isTopicsSuccess, topics, setSelectedTopic, selectedTopic]);

  const { data: notes, refetch: refetchNotes } = api.note.getAll.useQuery(
    {
      topicId: selectedTopic?.id ?? "",
    },
    {
      enabled: sessionData?.user !== undefined && selectedTopic !== null,
    }
  );

  const createNote = api.note.create.useMutation({
    onSuccess: () => {
      void refetchNotes();
    },
  });

  const deleteNote = api.note.delete.useMutation({
    onSuccess: () => {
      void refetchNotes();
    },
  });

  return (
    <Box p={4}>
      <div>
        <OrderedList>
          {topics?.map((topic) => (
            <ListItem key={topic.id}>
              <a
                href="#"
                onClick={(evt) => {
                  evt.preventDefault();
                  setSelectedTopic(topic);
                }}
              >
                {selectedTopic?.id === topic.id ? (
                  <Text as="b">{topic.title}</Text>
                ) : (
                  <Text>{topic.title}</Text>
                )}
              </a>
            </ListItem>
          ))}
        </OrderedList>

        <Divider m={4} />
        <FormControl
          onSubmit={(e: FormEvent) => {
            e.preventDefault();
            createTopic.mutate({
              title: newTitle,
            });
            setNewTitle("");
          }}
        >
          <Flex direction="row" justifyContent="space-between">
            <FormLabel flexGrow={1}>
              New Topic
              <Input
                type="text"
                placeholder="Topic title"
                onChange={(e) => {
                  setNewTitle(e.target.value);
                }}
              />
            </FormLabel>

            <Button type="submit" mt={6}>
              Create
            </Button>
          </Flex>
        </FormControl>
      </div>

      <div>
        <div>
          {notes?.map((note) => (
            <div key={note.id}>
              <NoteCard
                note={note}
                onDelete={() => void deleteNote.mutate({ id: note.id })}
              />
            </div>
          ))}
        </div>

        <NoteEditor
          onSave={({ title, content }) => {
            void createNote.mutate({
              title,
              content,
              topicId: selectedTopic?.id ?? "",
            });
          }}
        />
      </div>
    </Box>
  );
};
